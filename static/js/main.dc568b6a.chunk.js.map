{"version":3,"sources":["Components/Timer.js","Components/RandChar.js","Components/ResultTable.js","App.js","index.js"],"names":["Timer","props","useState","isRunning","setIsRunning","secRef","useRef","secs","reset","clearIncSec","current","updateTime","stopFunc","window","clearInterval","useEffect","intervalId","setInterval","isCombo","setCombFalse","className","disabled","onClick","startFunc","randStartCh2","randLst","Array","charCodeAt","keys","map","i","concat","res","Math","floor","random","length","String","fromCharCode","ResultTable","class","cities","city","replace","charAt","toUpperCase","id","App","cityInp","setCityInp","sendVal","setSendVal","score","setScore","acc","setAcc","sec","setSecs","combo","setCombo","startCh","setStartCh","usedCities","setUsedCities","infoMess","setInfoMess","isComb","setIsComb","isActive","setIsActive","inpRef","console","log","focus","isStartChValid","checkCity","cityName","axios","get","then","data","oldLst","toLowerCase","stCh","resp","citiesByCh","citiesStartCh","filter","name","includes","setTimeout","randStartCh","alt","src","style","marginTop","fontSize","join","secFromTimer","onSubmit","event","preventDefault","cityInpLow","startUpper","type","onChange","target","value","ref","marginBottom","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc568b6a.chunk.js","sourcesContent":["import './Timer.css';\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\nvar Timer = (props) => {\r\n\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n    // const [isCombo, setIsCombo] = useState(props.isCombo);\r\n\r\n    const secRef = useRef(props.secs);\r\n\r\n    const start = () => {\r\n        setIsRunning(true);\r\n        props.startFunc();\r\n        // props.enableInput();\r\n    }\r\n\r\n    const reset = () => {\r\n        clearIncSec();\r\n        secRef.current = 30;\r\n        setIsRunning(false);\r\n        props.updateTime(secRef.current);\r\n        props.stopFunc();\r\n    }\r\n\r\n    const clearIncSec = () => {\r\n        window.clearInterval(secRef.current);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isRunning) {\r\n            // debugger\r\n\r\n            const intervalId = setInterval(() => {\r\n                if(secRef.current === 0) {\r\n                    reset();\r\n                } else if (props.isCombo) {\r\n                    clearIncSec();\r\n                    secRef.current = secRef.current + 10;    //add 10 sec\r\n                    props.setCombFalse();   //to trigger useEffect to start again\r\n                } else secRef.current = secRef.current - 1;\r\n\r\n                props.updateTime(secRef.current);\r\n            }, 1000);\r\n\r\n            return (() => clearInterval(intervalId));\r\n        }\r\n    }, [isRunning, props.isCombo]);\r\n\r\n    //works - but ++\r\n    // useEffect(() => {\r\n    //     // debugger;\r\n    //     secRef.current = window.setInterval(() => {\r\n    //         setSeconds((s) => s + 1);\r\n    //     }, 1000);\r\n\r\n    //     return clearIncSec;\r\n\r\n    // }, []);\r\n\r\n    return(\r\n        <div className=\"timer\">\r\n            {/* <p className=\"secs\">{seconds}s</p> */}\r\n\r\n            <div >\r\n                {/* {secRef.current > 0 ? */}\r\n                {!isRunning ?\r\n                    <button disabled={secRef.current===0} onClick={start} className=\"button\">Start</button>\r\n                    : \"\"}\r\n                {isRunning ? <button onClick={reset} className=\"button\">Reset</button>\r\n                    : \"\"}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Timer;","//used in App.js\r\n\r\nexport const randStartCh2 = () => {\r\n    const randAZLst = [...Array('Z'.charCodeAt(0) - 'A'.charCodeAt(0) + 1).keys()].map(i => i + 'A'.charCodeAt(0));   //[65 .. 90]\r\n\r\n    const randLst = randAZLst.concat(['Æ'.charCodeAt(0), 'Ø'.charCodeAt(0), 'Å'.charCodeAt(0)]);\r\n\r\n    const res = randLst[Math.floor(Math.random() * randLst.length)];\r\n\r\n    return String.fromCharCode(res);\r\n  }\r\n\r\n\r\n\r\n  export default randStartCh2;","import './ResultTable.css';\r\n\r\nvar ResultTable = (props) => {\r\n    return (\r\n        <div className=\"content\" >\r\n            <div class=\"columns\">\r\n                <ul className={\"table\"} >\r\n                    {props.cities.map(city =>\r\n                        <li key={city.id} className=\"item\">\r\n                            {city.replace(city.charAt(0), city.charAt(0).toUpperCase())}\r\n                        </li>)}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultTable;","import './App.css';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport Timer from './Components/Timer';\r\nimport randStartCh2 from './Components/RandChar';\r\nimport ResultTable from './Components/ResultTable';\r\n\r\nvar App = () => {\r\n  const [cityInp, setCityInp] = useState(\"\");\r\n  const [sendVal, setSendVal] = useState(\"\");   //final val being sent\r\n  const [score, setScore] = useState(0);\r\n  const [acc, setAcc] = useState(false);    //if sent city was accepted\r\n  const [sec, setSecs] = useState(30);\r\n  const [combo, setCombo] = useState(0);\r\n\r\n  const [startCh, setStartCh] = useState(''); //useState(String.fromCharCode(Math.floor(Math.random() * (\"Z\".charCodeAt(0) - \"A\".charCodeAt(0) + 1)) + \"A\".charCodeAt(0)));\r\n  const [usedCities, setUsedCities] = useState([]);\r\n  const [infoMess, setInfoMess] = useState(\"\");\r\n  const [isComb, setIsComb] = useState(false);\r\n  const [isActive, setIsActive] = useState(false);  //is game running\r\n\r\n  const inpRef = useRef();    //used to auto focus input\r\n\r\n  const handleChange = (event) => {\r\n    setCityInp(event.target.value)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();   //prev sit from reloading..\r\n    const cityInpLow = cityInp.toLowerCase();\r\n    setSendVal(cityInpLow);\r\n    const startUpper = cityInp.replace(cityInp.charAt(0), cityInp.charAt(0).toUpperCase());\r\n    if ((startCh.toLowerCase() === cityInpLow.charAt(0) && !usedCities.includes(cityInpLow))) {\r\n      checkCity(startUpper);\r\n    } else {\r\n      setCombo(0);\r\n      setAcc(false);\r\n      setIsComb(false)\r\n    }\r\n  }\r\n\r\n  const getAll = () => {\r\n    axios.get('https://localhost:44334/city')\r\n      .then(res => {\r\n        console.log(res.data);\r\n        setScore(res.data);\r\n        // debugger;\r\n      }).catch((error) => {\r\n        console.log(error);\r\n        if (error.response) {\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        }\r\n      })\r\n    }\r\n\r\n    //make useEffect - when game isActive then enable text inp!\r\n  useEffect(() => {\r\n    if(!isActive) {\r\n      isStartChValid(randStartCh2());\r\n      // setStartCh('I')  //testing randChar\r\n    } else {\r\n      enableInp()\r\n    }\r\n\r\n  }, [isActive]);   //only do it upon initial render\r\n\r\n  //passed down to Timer - reset all state\r\n  function stopGame () {\r\n    setCombo(0);\r\n    // setUsedCities([]);\r\n    setCityInp(\"\");\r\n    setSendVal(\"\");\r\n    setAcc(false);\r\n    setIsActive(false);\r\n  }\r\n\r\n  function startGame() {\r\n    setScore(0);\r\n    setUsedCities([]);\r\n    setIsActive(true);\r\n\r\n  }\r\n\r\n  function updateSecs (secFromTimer) {\r\n    setSecs(secFromTimer);\r\n  }\r\n\r\n  function setComboFalse() {\r\n    console.log(\"app - set comb false\")\r\n    setCombo(false);\r\n    setIsComb(false);\r\n  }\r\n\r\n  function enableInp() {\r\n    console.log(\"enable!\")\r\n    // debugger\r\n    inpRef.current.focus();\r\n  }\r\n\r\n\r\n\r\n  const checkCity = (cityName) => {\r\n    axios.get('https://democity.azurewebsites.net/' + cityName)\r\n      .then(res => {\r\n        console.log(\"checkCity:\", res.data);\r\n\r\n        setAcc(res.data);\r\n        if(res.data) {\r\n\r\n          setCityInp(\"\");\r\n          setScore(score + 1);\r\n          setCombo(combo + 1);\r\n          setUsedCities(oldLst => [...oldLst, cityName.toLowerCase()]);\r\n          console.log(\"combo\", combo)\r\n          if((combo+1) === 2) {\r\n            setCombo(0);\r\n            setIsComb(true);\r\n            // setIsComb(false)\r\n            // setSecs(sec + 100);\r\n          }\r\n          // setStartCh(cityName.charAt(cityName.length - 1));\r\n          isStartChValid(cityName.charAt(cityName.length - 1));   //recurse until accep. new rand startCh\r\n\r\n          // console.log(cityName.charAt(cityName.length - 1));\r\n        }\r\n    });\r\n  }\r\n\r\n  //recurses until new usable startCh is generated - then changes state\r\n  const isStartChValid = (stCh) => {\r\n    axios.get('https://democity.azurewebsites.net/cat/' + stCh.toUpperCase())\r\n    .then(resp =>  {\r\n        const citiesByCh = resp.data.citiesStartCh;\r\n        console.log(stCh+\" startCh: \", citiesByCh);\r\n\r\n        if (citiesByCh.length > 0) {\r\n          const fil = usedCities.filter(name => citiesByCh.includes(name));   //keep items that are in both lsts\r\n          if (fil.length === citiesByCh.length) {   //lsts identical - thus all cities w. that startCh are used\r\n            setInfoMess(\"Random letter generated \\n All cities used with: \" + stCh.toUpperCase());\r\n            setTimeout(() => {\r\n              setInfoMess(\"\")\r\n            }, 5000)\r\n            isStartChValid(randStartCh());\r\n\r\n          } else {\r\n            setStartCh(stCh);\r\n          }\r\n        } else {  //no cities w. startCh in API e.g 'Z' - find new rand. startCh\r\n\r\n          isStartChValid(randStartCh2());\r\n          // isStartChValid('P');   //testing\r\n\r\n        }\r\n    })\r\n  }\r\n\r\n  const randStartCh = () => {\r\n    const randAZLst = [...Array('Z'.charCodeAt(0) - 'A'.charCodeAt(0) + 1).keys()].map(i => i + 'A'.charCodeAt(0));   //[65 .. 90]\r\n    // console.log(\"randAZ:\", randAZLst);\r\n    const randLst = randAZLst.concat(['Æ'.charCodeAt(0), 'Ø'.charCodeAt(0), 'Å'.charCodeAt(0)]);\r\n    // console.log(\"ÆØÅ\", randLst);\r\n    const res = randLst[Math.floor(Math.random() * randLst.length)];\r\n\r\n    return String.fromCharCode(res);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\r\n      <header>\r\n      </header>\r\n      <main className=\"main\">\r\n        <img className=\"bg\" alt=\"nyhavn\" src=\"https://images.unsplash.com/photo-1513622470522-26c3c8a854bc?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80\"/>\r\n\r\n        <aside className=\"left\">\r\n        </aside>\r\n        <article className=\"mainContent\">\r\n\r\n          <h2 className=\"title\" >City Name Challenge</h2>\r\n          <h2>Denmark</h2>\r\n          <p style={{marginTop: \"20px\"}}>Enter a danish city that starts with the letter: </p>\r\n\r\n\r\n          {sendVal ? <p style={{fontSize: \"24px\", marginTop: \"5px\"}}> Entered: <span className={acc ? \"correctTxt\" : \"wrongTxt\" }>{sendVal}</span></p> : <p></p> }\r\n          <div className=\"scoreDiv\">\r\n            <h1 className=\"startCh\">{startCh.toUpperCase()}</h1>\r\n            <p className={isComb ?  [\"secs\", \"greenTxt\"].join(\" \") : \"secs\"}>{sec}s</p>\r\n          </div>\r\n            {infoMess.length === 0 ? <p className=\"scoreTxt\">Score: {score}</p> : <p className={[\"display-linebreak\", \"blue-border\"].join(\" \")}>{infoMess}</p>}\r\n            <p>Combo: {combo }</p>\r\n            <Timer secs={sec} stopFunc={stopGame} startFunc={startGame} updateTime={updateSecs} setCombFalse={setComboFalse}\r\n                isCombo={isComb}  />\r\n\r\n\r\n            <div className=\"form\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"inpDiv\">\r\n                      <input type=\"text\" onChange={handleChange} value={cityInp}\r\n                          // disabled={ sec === 0 || sec === 20} ref={inpRef}/>\r\n                          disabled={!isActive} ref={inpRef}/>\r\n\r\n                      {/* <button type=\"submit\">Submit city</button> */}\r\n                      {isActive ? <button className=\"submitButton\" type=\"submit\" disabled={!isActive}>Submit city</button>\r\n                        : \"\"}\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {usedCities.length > 0 ? <h2 style={{marginBottom:\"7px\"}}>Entered cities</h2> : \"\"}\r\n            <ResultTable cities={usedCities} />\r\n\r\n        </article>\r\n\r\n        <nav className=\"right\">\r\n        </nav>\r\n\r\n      </main>\r\n\r\n\r\n\r\n     <footer className=\"footer\"></footer>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}