{"version":3,"sources":["Components/Timer.js","Components/RandChar.js","Components/ResultTable.js","App.js","index.js"],"names":["Modal","setAppElement","Timer","props","useState","isOpen","setIsOpen","toggleModal","isRunning","setIsRunning","secRef","useRef","secs","reset","clearIncSec","current","updateTime","stopFunc","window","clearInterval","useEffect","intervalId","setInterval","isCombo","setCombFalse","className","disabled","onClick","startFunc","onRequestClose","contentLabel","overlayClassName","href","target","rel","randStartCh2","randLst","Array","charCodeAt","keys","map","i","concat","res","Math","floor","random","length","String","fromCharCode","ResultTable","cities","city","replace","charAt","toUpperCase","id","App","cityInp","setCityInp","sendVal","setSendVal","score","setScore","acc","setAcc","sec","setSecs","combo","setCombo","startCh","setStartCh","usedCities","setUsedCities","hintCity","setHintCity","infoMess","setInfoMess","isComb","setIsComb","isActive","setIsActive","inpRef","focus","isStartChValid","checkCity","cityName","axios","get","then","data","oldLst","toLowerCase","stCh","resp","citiesByCh","citiesStartCh","difference","filter","x","includes","name","setTimeout","randStartCh","console","log","alt","src","style","marginTop","fontSize","join","secFromTimer","onSubmit","event","preventDefault","cityInpLow","startUpper","type","onChange","value","ref","marginBottom","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.630438dc.chunk.js","sourcesContent":["import './Timer.css';\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport Modal from \"react-modal\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nvar Timer = (props) => {\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    function toggleModal() {\r\n        setIsOpen(!isOpen);\r\n    }\r\n\r\n\r\n    const [isRunning, setIsRunning] = useState(false);\r\n    const [showInfo, setShowInfo] = useState(false);\r\n    const secRef = useRef(props.secs);\r\n\r\n    const start = () => {\r\n        setIsRunning(true);\r\n        props.startFunc();\r\n        // props.enableInput();\r\n    }\r\n\r\n    const reset = () => {\r\n        clearIncSec();\r\n        secRef.current = 60;\r\n        setIsRunning(false);\r\n        props.updateTime(secRef.current);\r\n        props.stopFunc();\r\n    }\r\n\r\n    const clearIncSec = () => {\r\n        window.clearInterval(secRef.current);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isRunning) {\r\n            // debugger\r\n\r\n            const intervalId = setInterval(() => {\r\n                if(secRef.current === 0) {\r\n                    reset();\r\n                } else if (props.isCombo) {\r\n                    clearIncSec();\r\n                    secRef.current = secRef.current + 10;    //add 10 sec\r\n                    props.setCombFalse();   //to trigger useEffect to start again\r\n                } else secRef.current = secRef.current - 1;\r\n\r\n                props.updateTime(secRef.current);\r\n            }, 1000);\r\n\r\n            return (() => clearInterval(intervalId));\r\n        }\r\n    }, [isRunning, props.isCombo]);\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"timer\">\r\n            <div >\r\n                {/* {secRef.current > 0 ? */}\r\n                {!isRunning ?\r\n                    <button disabled={secRef.current===0} onClick={start} className=\"button\">Start</button>\r\n                    : \"\"}\r\n                {isRunning ? <button onClick={reset} className=\"button\">Reset</button>\r\n                    : \"\"}\r\n                {!isRunning ? <button className=\"button\" onClick={toggleModal}>Info</button> : \"\" }\r\n                {/* {showInfo ? <Info/> : \"\"} */}\r\n\r\n\r\n                <Modal\r\n                    isOpen={isOpen}\r\n                    onRequestClose={toggleModal}\r\n                    contentLabel=\"My dialog\"\r\n                    className=\"mymodal\"\r\n                    overlayClassName=\"myoverlay\"\r\n                >\r\n                        <div className=\"infoBox\">\r\n\r\n                            <h2 className=\"infoBoxTxt\">Getting combos</h2>\r\n                            <p className=\"infoBoxTxt\">Enter 3 correct cities in a row, and 10 sec's will be added to the timer. This can be seen when the timer flashes green.\r\n                                The combo counter is set to 0 if a wrong city is entered. This is however the only penalty.</p>\r\n\r\n                            <h2 className=\"infoBoxHdr\">Spelling and dead ends</h2>\r\n                            <p className=\"infoBoxTxt\">The first letter of the input can be either upper or lower case. However with city names consisting of multiple words such as Kirke Værløse,\r\n                                the first letter of the other words must be uppercase like so: \"kirke Værløse\". A name can only be used once.\r\n                                If a \"dead end\" is reached, ie. all cities with a certain starting letter have been used, then a new random letter is generated.\r\n                                Only valid letters are given.\r\n                            </p>\r\n\r\n                            <h2 className=\"infoBoxHdr\">Data and precautions</h2>\r\n                            <p className=\"infoBoxTxt\">The data used is from <a href=\"https://statistikbanken.dk/statbank5a/SelectVarVal/Define.asp?MainTable=BY1\" target=\"_blank\" rel=\"noreferrer\">Danmark Statistik</a>,\r\n                                but it does not explicitly list cities only, which can be a source of error.\r\n                                The definition of a danish \"city\"/\"town\" given by Danmarks Statistik, consists of two main criteria. Firstly being a population of min. 200, and secondly a distance of max. 200 meters from neighboring buildings.\r\n                                Applying the data set to this definition results in approx. 1400 cities, but again precaution must be taken against minor errors.\r\n                                The only exception to the city definition, admittedly a bit arbitrary, is the districts (\"byområder/\"bydele\") of <a href=\"https://da.wikipedia.org/wiki/Hovedstadsomr%C3%A5det\" target=\"_blank\" rel=\"noreferrer\">Hovedstadområdet</a>, e.g. Glostrup.\r\n                            </p>\r\n\r\n                            <button onClick={toggleModal} className=\"button\">Close</button>\r\n                        </div>\r\n                </Modal>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Timer;","//used in App.js\r\n\r\nexport const randStartCh2 = () => {\r\n    const randAZLst = [...Array('Z'.charCodeAt(0) - 'A'.charCodeAt(0) + 1).keys()].map(i => i + 'A'.charCodeAt(0));   //[65 .. 90]\r\n\r\n    const randLst = randAZLst.concat(['Æ'.charCodeAt(0), 'Ø'.charCodeAt(0), 'Å'.charCodeAt(0)]);\r\n\r\n    const res = randLst[Math.floor(Math.random() * randLst.length)];\r\n\r\n    return String.fromCharCode(res);\r\n  }\r\n\r\n\r\n\r\n  export default randStartCh2;","import './ResultTable.css';\r\n\r\nvar ResultTable = (props) => {\r\n    return (\r\n        <div className=\"content\" >\r\n            <div className=\"columns\">\r\n                <ul className={\"table\"} >\r\n                    {props.cities.map(city =>\r\n                        <li key={city.id} className=\"item\">\r\n                            {city.replace(city.charAt(0), city.charAt(0).toUpperCase())}\r\n                        </li>)}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultTable;","import './App.css';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport Timer from './Components/Timer';\r\nimport randStartCh2 from './Components/RandChar';\r\nimport ResultTable from './Components/ResultTable';\r\n\r\nvar App = () => {\r\n  const [cityInp, setCityInp] = useState(\"\");\r\n  const [sendVal, setSendVal] = useState(\"\");   //final val being sent\r\n  const [score, setScore] = useState(0);\r\n  const [acc, setAcc] = useState(false);    //if sent city was accepted\r\n  const [sec, setSecs] = useState(60);\r\n  const [combo, setCombo] = useState(0);\r\n\r\n  const [startCh, setStartCh] = useState(randStartCh2()); //useState(String.fromCharCode(Math.floor(Math.random() * (\"Z\".charCodeAt(0) - \"A\".charCodeAt(0) + 1)) + \"A\".charCodeAt(0)));\r\n  const [usedCities, setUsedCities] = useState([]);\r\n\r\n  const [hintCity, setHintCity] = useState(\"\");\r\n\r\n  const [infoMess, setInfoMess] = useState(\"\");\r\n  const [isComb, setIsComb] = useState(false);\r\n  const [isActive, setIsActive] = useState(false);  //is game running\r\n\r\n  const inpRef = useRef();    //used to auto focus input\r\n\r\n  const handleChange = (event) => {\r\n    setCityInp(event.target.value)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();   //prev sit from reloading..\r\n    const cityInpLow = cityInp.toLowerCase();\r\n    setSendVal(cityInpLow);\r\n    const startUpper = cityInp.replace(cityInp.charAt(0), cityInp.charAt(0).toUpperCase());\r\n    if ((startCh.toLowerCase() === cityInpLow.charAt(0) && !usedCities.includes(cityInpLow))) {\r\n      checkCity(startUpper);\r\n    } else {\r\n      setCombo(0);\r\n      setAcc(false);\r\n      setIsComb(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(!isActive) {\r\n      isStartChValid(randStartCh2());\r\n\r\n    } else {\r\n      enableInp()\r\n    }\r\n\r\n  }, [isActive]);   //only do it upon initial render\r\n\r\n  //passed down to Timer - reset all state\r\n  function stopGame () {\r\n    setCombo(0);\r\n    setCityInp(\"\");\r\n    setSendVal(\"\");\r\n    setAcc(false);\r\n    setIsActive(false);\r\n  }\r\n\r\n  function startGame() {\r\n    setScore(0);\r\n    setUsedCities([]);\r\n    setIsActive(true);\r\n\r\n  }\r\n\r\n  function updateSecs (secFromTimer) {\r\n    setSecs(secFromTimer);\r\n  }\r\n\r\n  function setComboFalse() {\r\n    setCombo(false);\r\n    setIsComb(false);\r\n  }\r\n\r\n  function enableInp() {\r\n    // debugger\r\n    inpRef.current.focus();\r\n  }\r\n\r\n\r\n  const checkCity = (cityName) => {\r\n    axios.get('https://democity.azurewebsites.net/' + cityName)\r\n      .then(res => {\r\n        // console.log(\"checkCity:\", res.data);\r\n\r\n        setAcc(res.data);\r\n        if(res.data) {\r\n          setCityInp(\"\");\r\n          setScore(score + 1);\r\n          setCombo(combo + 1);\r\n          setUsedCities(oldLst => [...oldLst, cityName.toLowerCase()]);\r\n          if((combo+1) === 3) {\r\n            setCombo(0);\r\n            setIsComb(true);\r\n          }\r\n          // setStartCh(cityName.charAt(cityName.length - 1));\r\n          isStartChValid(cityName.charAt(cityName.length - 1));   //recurse until accep. new rand startCh\r\n\r\n          // console.log(cityName.charAt(cityName.length - 1));\r\n        }\r\n    });\r\n  }\r\n\r\n  //recurses until new usable startCh is generated - then changes state\r\n  const isStartChValid = (stCh) => {\r\n    axios.get('https://democity.azurewebsites.net/cat/' + stCh.toUpperCase())\r\n    .then(resp =>  {\r\n        const citiesByCh = resp.data.citiesStartCh;\r\n\r\n        if (citiesByCh.length > 0) {\r\n          let difference = citiesByCh.filter(x => !usedCities.includes(x));\r\n          setHintCity( difference[Math.floor(Math.random() * difference.length)]);\r\n\r\n          // const fil = usedCities.filter(name =>  citiesByCh.includes(name.replace(name.charAt(0), name.charAt(0).toUpperCase())));   //keep items that are in both lsts\r\n          const fil = citiesByCh.filter(name => usedCities.includes(name.toLowerCase()));\r\n          // console.log(\"cities in both ch:\", fil)\r\n          if (fil.length === citiesByCh.length) {   //lsts identical - thus all cities w. that startCh are used\r\n            setInfoMess(\"Random letter generated \\n All cities used with: \" + stCh.toUpperCase());\r\n            setTimeout(() => {\r\n              setInfoMess(\"\")\r\n            }, 5000)\r\n\r\n            isStartChValid(randStartCh());\r\n\r\n          } else {\r\n            // setLatestActiveStCh(stCh)\r\n            setStartCh(stCh);\r\n          }\r\n        } else {  //no cities w. startCh in API e.g 'Z' - find new rand. startCh\r\n          console.log(\"gen rand letter!\")\r\n          isStartChValid(randStartCh2());\r\n          // isStartChValid('P');   //testing\r\n\r\n        }\r\n    })\r\n  }\r\n\r\n  const randStartCh = () => {\r\n    const randAZLst = [...Array('Z'.charCodeAt(0) - 'A'.charCodeAt(0) + 1).keys()].map(i => i + 'A'.charCodeAt(0));   //[65 .. 90]\r\n    // console.log(\"randAZ:\", randAZLst);\r\n    const randLst = randAZLst.concat(['Æ'.charCodeAt(0), 'Ø'.charCodeAt(0), 'Å'.charCodeAt(0)]);\r\n    // console.log(\"ÆØÅ\", randLst);\r\n    const res = randLst[Math.floor(Math.random() * randLst.length)];\r\n\r\n    return String.fromCharCode(res);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\r\n      <header>\r\n      </header>\r\n      <main className=\"main\">\r\n        <img className=\"bg\" alt=\"nyhavn\" src=\"https://images.unsplash.com/photo-1513622470522-26c3c8a854bc?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80\"/>\r\n\r\n        <aside className=\"left\">\r\n        </aside>\r\n        <article className=\"mainContent\">\r\n\r\n          <h2 className=\"title\" >City Name Challenge</h2>\r\n          <h2>Denmark</h2>\r\n          <p style={{marginTop: \"20px\"}}>Enter a danish city that starts with the letter: </p>\r\n\r\n\r\n          {sendVal ? <p style={{fontSize: \"24px\", marginTop: \"5px\"}}> Entered: <span className={acc ? \"correctTxt\" : \"wrongTxt\" }>{sendVal}</span></p> : <p></p> }\r\n          <div className=\"scoreDiv\">\r\n            <h1 className=\"startCh\">{startCh.toUpperCase()}</h1>\r\n            <p className={isComb ?  [\"secs\", \"greenTxt\"].join(\" \") : \"secs\"}>{sec}s</p>\r\n          </div>\r\n            {infoMess.length === 0 ? <p className=\"scoreTxt\">Score: {score}</p> : <p className={[\"display-linebreak\", \"blue-border\"].join(\" \")}>{infoMess}</p>}\r\n            <p>Combo: {combo }</p>\r\n            <Timer secs={sec} stopFunc={stopGame} startFunc={startGame} updateTime={updateSecs} setCombFalse={setComboFalse}\r\n                isCombo={isComb}  />\r\n\r\n\r\n            <div className=\"form\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"inpDiv\">\r\n                      <input type=\"text\" onChange={handleChange} value={cityInp}\r\n                          // disabled={ sec === 0 || sec === 20} ref={inpRef}/>\r\n                          disabled={!isActive} ref={inpRef}/>\r\n\r\n                      {/* <button type=\"submit\">Submit city</button> */}\r\n                      {isActive ? <button className=\"submitButton\" type=\"submit\" disabled={!isActive}>Submit city</button>\r\n                        : \"\"}\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {!isActive && usedCities.length > 0 ? <p className=\"hintTxt\">Hint: {hintCity}</p> : \"\"}\r\n            {usedCities.length > 0 ? <h2 style={{marginBottom:\"7px\"}}>Entered cities</h2> : \"\"}\r\n            <ResultTable cities={usedCities} />\r\n\r\n        </article>\r\n\r\n        <nav className=\"right\">\r\n        </nav>\r\n\r\n      </main>\r\n\r\n\r\n\r\n     <footer className=\"footer\"></footer>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}