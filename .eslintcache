[{"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\index.js":"1","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\App.js":"2","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\Timer.js":"3","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\RandChar.js":"4"},{"size":432,"mtime":1608890819850,"results":"5","hashOfConfig":"6"},{"size":6184,"mtime":1609355987661,"results":"7","hashOfConfig":"6"},{"size":1604,"mtime":1609344791331,"results":"8","hashOfConfig":"6"},{"size":447,"mtime":1609355598498,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"142gdva",{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\index.js",[],["20","21"],"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\App.js",["22","23"],"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\Timer.js",["24"],"import './Timer.css';\r\nimport { useState, useEffect } from \"react\";\r\n\r\nvar Timer = (props) => {\r\n\r\n    const [seconds, setSeconds] = useState(props.secs);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n\r\n    const start = () => { setIsRunning(true); }\r\n    const reset = () => {\r\n        setSeconds(10);  //what ever hardcoded val from App.js\r\n        setIsRunning(false);\r\n        props.stopFunc(false);   //reset game\r\n        props.updateTime(10);   //reset App secs state\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (isRunning && seconds > 0) {\r\n            interval = setInterval(() => {\r\n                // setSeconds(seconds => seconds - 1);\r\n                props.updateTime(seconds-1);\r\n                setSeconds(seconds-1);\r\n\r\n              }, 1000);\r\n        } else if (isRunning) {\r\n            // debugger;\r\n            props.updateTime(0);\r\n            setSeconds(0);\r\n            setIsRunning(false);\r\n            props.stopFunc(true);\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isRunning, seconds]);     //Only re-run effect if these state changes\r\n\r\n    return(\r\n        <div className=\"timer\">\r\n            {/* <p className=\"secs\">{seconds}s</p> */}\r\n\r\n            <div >\r\n                {seconds > 0 ?\r\n                    <button disabled={seconds===0} onClick={start} className=\"button\">Start</button>\r\n                    : \"\"}\r\n                <button onClick={reset} className=\"button\">Reset</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Timer;","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\RandChar.js",[],{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","severity":1,"message":"30","line":34,"column":9,"nodeType":"31","messageId":"32","endLine":34,"endColumn":15},{"ruleId":"33","severity":1,"message":"34","line":53,"column":6,"nodeType":"35","endLine":53,"endColumn":8,"suggestions":"36"},{"ruleId":"33","severity":1,"message":"37","line":36,"column":8,"nodeType":"35","endLine":36,"endColumn":28,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'getAll' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isStartChValid'. Either include it or remove the dependency array.","ArrayExpression",["41"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["42"],"no-global-assign","no-unsafe-negation",{"desc":"43","fix":"44"},{"desc":"45","fix":"46"},"Update the dependencies array to be: [isStartChValid]",{"range":"47","text":"48"},"Update the dependencies array to be: [isRunning, props, seconds]",{"range":"49","text":"50"},[1832,1834],"[isStartChValid]",[1098,1118],"[isRunning, props, seconds]"]