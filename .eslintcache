[{"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\index.js":"1","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\App.js":"2","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\Timer.js":"3","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\RandChar.js":"4","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\ResultTable.js":"5"},{"size":432,"mtime":1608890819850,"results":"6","hashOfConfig":"7"},{"size":7587,"mtime":1609508749728,"results":"8","hashOfConfig":"7"},{"size":2133,"mtime":1609501931475,"results":"9","hashOfConfig":"7"},{"size":445,"mtime":1609501730203,"results":"10","hashOfConfig":"7"},{"size":576,"mtime":1609508021255,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"142gdva",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\index.js",[],["24","25"],"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\App.js",["26","27"],"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\Timer.js",["28"],"import './Timer.css';\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\nvar Timer = (props) => {\r\n\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n    // const [isCombo, setIsCombo] = useState(props.isCombo);\r\n\r\n    const secRef = useRef(props.secs);\r\n\r\n    const start = () => {\r\n        setIsRunning(true);\r\n        props.startFunc();\r\n        // props.enableInput();\r\n    }\r\n\r\n    const reset = () => {\r\n        clearIncSec();\r\n        secRef.current = 20;\r\n        setIsRunning(false);\r\n        props.updateTime(secRef.current);\r\n        props.stopFunc();\r\n    }\r\n\r\n    const clearIncSec = () => {\r\n        window.clearInterval(secRef.current);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isRunning) {\r\n            // debugger\r\n\r\n            const intervalId = setInterval(() => {\r\n                if(secRef.current === 0) {\r\n                    reset();\r\n                } else if (props.isCombo) {\r\n                    clearIncSec();\r\n                    secRef.current = secRef.current + 10;    //add 10 sec\r\n                    props.setCombFalse();   //to trigger useEffect to start again\r\n                } else secRef.current = secRef.current - 1;\r\n\r\n                props.updateTime(secRef.current);\r\n            }, 1000);\r\n\r\n            return (() => clearInterval(intervalId));\r\n        }\r\n    }, [isRunning, props.isCombo]);\r\n\r\n    //works - but ++\r\n    // useEffect(() => {\r\n    //     // debugger;\r\n    //     secRef.current = window.setInterval(() => {\r\n    //         setSeconds((s) => s + 1);\r\n    //     }, 1000);\r\n\r\n    //     return clearIncSec;\r\n\r\n    // }, []);\r\n\r\n    return(\r\n        <div className=\"timer\">\r\n            {/* <p className=\"secs\">{seconds}s</p> */}\r\n\r\n            <div >\r\n                {/* {secRef.current > 0 ? */}\r\n                {!isRunning ?\r\n                    <button disabled={secRef.current===0} onClick={start} className=\"button\">Start</button>\r\n                    : \"\"}\r\n                {isRunning ? <button onClick={reset} className=\"button\">Reset</button>\r\n                    : \"\"}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Timer;","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\RandChar.js",[],"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\ResultTable.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":43,"column":9,"nodeType":"35","messageId":"36","endLine":43,"endColumn":15},{"ruleId":"37","severity":1,"message":"38","line":67,"column":6,"nodeType":"39","endLine":67,"endColumn":16,"suggestions":"40"},{"ruleId":"37","severity":1,"message":"41","line":48,"column":8,"nodeType":"39","endLine":48,"endColumn":34,"suggestions":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'getAll' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isStartChValid'. Either include it or remove the dependency array.","ArrayExpression",["45"],"React Hook useEffect has missing dependencies: 'props' and 'reset'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["46"],"no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},{"desc":"49","fix":"50"},"Update the dependencies array to be: [isActive, isStartChValid]",{"range":"51","text":"52"},"Update the dependencies array to be: [isRunning, props, props.isCombo, reset]",{"range":"53","text":"54"},[2275,2285],"[isActive, isStartChValid]",[1329,1355],"[isRunning, props, props.isCombo, reset]"]