[{"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\index.js":"1","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\App.js":"2","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\Timer.js":"3","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\RandChar.js":"4","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\ResultTable.js":"5"},{"size":432,"mtime":1608890819850,"results":"6","hashOfConfig":"7"},{"size":7687,"mtime":1609510232581,"results":"8","hashOfConfig":"7"},{"size":2133,"mtime":1609510149481,"results":"9","hashOfConfig":"7"},{"size":445,"mtime":1609501730203,"results":"10","hashOfConfig":"7"},{"size":520,"mtime":1609509616997,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1f3l2d2",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\index.js",[],["25","26"],"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\App.js",["27","28"],"import './App.css';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport Timer from './Components/Timer';\r\nimport randStartCh2 from './Components/RandChar';\r\nimport ResultTable from './Components/ResultTable';\r\n\r\nvar App = () => {\r\n  const [cityInp, setCityInp] = useState(\"\");\r\n  const [sendVal, setSendVal] = useState(\"\");   //final val being sent\r\n  const [score, setScore] = useState(0);\r\n  const [acc, setAcc] = useState(false);    //if sent city was accepted\r\n  const [sec, setSecs] = useState(30);\r\n  const [combo, setCombo] = useState(0);\r\n\r\n  const [startCh, setStartCh] = useState(''); //useState(String.fromCharCode(Math.floor(Math.random() * (\"Z\".charCodeAt(0) - \"A\".charCodeAt(0) + 1)) + \"A\".charCodeAt(0)));\r\n  const [usedCities, setUsedCities] = useState([]);\r\n  const [infoMess, setInfoMess] = useState(\"\");\r\n  const [isComb, setIsComb] = useState(false);\r\n  const [isActive, setIsActive] = useState(false);  //is game running\r\n\r\n  const inpRef = useRef();    //used to auto focus input\r\n\r\n  const handleChange = (event) => {\r\n    setCityInp(event.target.value)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();   //prev sit from reloading..\r\n    const cityInpLow = cityInp.toLowerCase();\r\n    setSendVal(cityInpLow);\r\n    const startUpper = cityInp.replace(cityInp.charAt(0), cityInp.charAt(0).toUpperCase());\r\n    if ((startCh.toLowerCase() === cityInpLow.charAt(0) && !usedCities.includes(cityInpLow))) {\r\n      checkCity(startUpper);\r\n    } else {\r\n      setCombo(0);\r\n      setAcc(false);\r\n      setIsComb(false)\r\n    }\r\n  }\r\n\r\n  const getAll = () => {\r\n    axios.get('https://localhost:44334/city')\r\n      .then(res => {\r\n        console.log(res.data);\r\n        setScore(res.data);\r\n        // debugger;\r\n      }).catch((error) => {\r\n        console.log(error);\r\n        if (error.response) {\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        }\r\n      })\r\n    }\r\n\r\n    //make useEffect - when game isActive then enable text inp!\r\n  useEffect(() => {\r\n    if(!isActive) {\r\n      isStartChValid(randStartCh2());\r\n      // setStartCh('I')  //testing randChar\r\n    } else {\r\n      enableInp()\r\n    }\r\n\r\n  }, [isActive]);   //only do it upon initial render\r\n\r\n  //passed down to Timer - reset all state\r\n  function stopGame () {\r\n    setCombo(0);\r\n    // setUsedCities([]);\r\n    setCityInp(\"\");\r\n    setSendVal(\"\");\r\n    setAcc(false);\r\n    setIsActive(false);\r\n  }\r\n\r\n  function startGame() {\r\n    setScore(0);\r\n    setUsedCities([]);\r\n    setIsActive(true);\r\n\r\n  }\r\n\r\n  function updateSecs (secFromTimer) {\r\n    setSecs(secFromTimer);\r\n  }\r\n\r\n  function setComboFalse() {\r\n    console.log(\"app - set comb false\")\r\n    setCombo(false);\r\n    setIsComb(false);\r\n  }\r\n\r\n  function enableInp() {\r\n    console.log(\"enable!\")\r\n    // debugger\r\n    inpRef.current.focus();\r\n  }\r\n\r\n\r\n\r\n  const checkCity = (cityName) => {\r\n    axios.get('https://localhost:5001/city/' + cityName)\r\n      .then(res => {\r\n        console.log(\"checkCity:\", res.data);\r\n\r\n        setAcc(res.data);\r\n        if(res.data) {\r\n\r\n          setCityInp(\"\");\r\n          setScore(score + 1);\r\n          setCombo(combo + 1);\r\n          setUsedCities(oldLst => [...oldLst, cityName.toLowerCase()]);\r\n          console.log(\"combo\", combo)\r\n          if((combo+1) === 2) {\r\n            setCombo(0);\r\n            setIsComb(true);\r\n            // setIsComb(false)\r\n            // setSecs(sec + 100);\r\n          }\r\n          // setStartCh(cityName.charAt(cityName.length - 1));\r\n          isStartChValid(cityName.charAt(cityName.length - 1));   //recurse until accep. new rand startCh\r\n\r\n          // console.log(cityName.charAt(cityName.length - 1));\r\n        }\r\n    });\r\n  }\r\n\r\n  //recurses until new usable startCh is generated - then changes state\r\n  const isStartChValid = (stCh) => {\r\n    axios.get('https://localhost:5001/cat/' + stCh.toUpperCase())\r\n    .then(resp =>  {\r\n        const citiesByCh = resp.data.citiesStartCh;\r\n        console.log(stCh+\" startCh: \", citiesByCh);\r\n\r\n        if (citiesByCh.length > 0) {\r\n          const fil = usedCities.filter(name => citiesByCh.includes(name));   //keep items that are in both lsts\r\n          if (fil.length === citiesByCh.length) {   //lsts identical - thus all cities w. that startCh are used\r\n            setInfoMess(\"Random letter generated \\n All cities used with: \" + stCh.toUpperCase());\r\n            setTimeout(() => {\r\n              setInfoMess(\"\")\r\n            }, 5000)\r\n            isStartChValid(randStartCh());\r\n\r\n          } else {\r\n            setStartCh(stCh);\r\n          }\r\n        } else {  //no cities w. startCh in API e.g 'Z' - find new rand. startCh\r\n\r\n          isStartChValid(randStartCh2());\r\n          // isStartChValid('P');   //testing\r\n\r\n        }\r\n    })\r\n  }\r\n\r\n  const randStartCh = () => {\r\n    const randAZLst = [...Array('Z'.charCodeAt(0) - 'A'.charCodeAt(0) + 1).keys()].map(i => i + 'A'.charCodeAt(0));   //[65 .. 90]\r\n    // console.log(\"randAZ:\", randAZLst);\r\n    const randLst = randAZLst.concat(['Æ'.charCodeAt(0), 'Ø'.charCodeAt(0), 'Å'.charCodeAt(0)]);\r\n    // console.log(\"ÆØÅ\", randLst);\r\n    const res = randLst[Math.floor(Math.random() * randLst.length)];\r\n\r\n    return String.fromCharCode(res);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n\r\n      <header>\r\n      </header>\r\n      <main className=\"main\">\r\n        <img className=\"bg\" alt=\"nyhavn\" src=\"https://images.unsplash.com/photo-1513622470522-26c3c8a854bc?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80\"/>\r\n\r\n        <aside className=\"left\">\r\n        </aside>\r\n        <article className=\"mainContent\">\r\n\r\n          <h2 className=\"title\" >City Name Challenge</h2>\r\n          <h2>Denmark</h2>\r\n          <p style={{marginTop: \"20px\"}}>Enter a danish city that starts with the letter: </p>\r\n\r\n\r\n          {sendVal ? <p style={{fontSize: \"24px\", marginTop: \"5px\"}}> Entered: <span className={acc ? \"correctTxt\" : \"wrongTxt\" }>{sendVal}</span></p> : <p></p> }\r\n          <div className=\"scoreDiv\">\r\n            <h1 className=\"startCh\">{startCh.toUpperCase()}</h1>\r\n            <p className={isComb ?  [\"secs\", \"greenTxt\"].join(\" \") : \"secs\"}>{sec}s</p>\r\n          </div>\r\n            {infoMess.length === 0 ? <p className=\"scoreTxt\">Score: {score}</p> : <p className={[\"display-linebreak\", \"blue-border\"].join(\" \")}>{infoMess}</p>}\r\n            <p>Combo: {combo }</p>\r\n            <Timer secs={sec} stopFunc={stopGame} startFunc={startGame} updateTime={updateSecs} setCombFalse={setComboFalse}\r\n                isCombo={isComb}  />\r\n\r\n\r\n            <div className=\"form\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <div className=\"inpDiv\">\r\n                      <input type=\"text\" onChange={handleChange} value={cityInp}\r\n                          // disabled={ sec === 0 || sec === 20} ref={inpRef}/>\r\n                          disabled={!isActive} ref={inpRef}/>\r\n\r\n                      {/* <button type=\"submit\">Submit city</button> */}\r\n                      {isActive ? <button className=\"submitButton\" type=\"submit\" disabled={!isActive}>Submit city</button>\r\n                        : \"\"}\r\n\r\n                    </div>\r\n                </form>\r\n            </div>\r\n            {usedCities.length > 0 ? <h2 style={{marginBottom:\"7px\"}}>Entered cities</h2> : \"\"}\r\n            <ResultTable cities={usedCities} />\r\n\r\n        </article>\r\n\r\n        <nav className=\"right\">\r\n        </nav>\r\n\r\n      </main>\r\n\r\n\r\n\r\n     <footer className=\"footer\"></footer>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\Timer.js",["29"],"import './Timer.css';\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\nvar Timer = (props) => {\r\n\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n    // const [isCombo, setIsCombo] = useState(props.isCombo);\r\n\r\n    const secRef = useRef(props.secs);\r\n\r\n    const start = () => {\r\n        setIsRunning(true);\r\n        props.startFunc();\r\n        // props.enableInput();\r\n    }\r\n\r\n    const reset = () => {\r\n        clearIncSec();\r\n        secRef.current = 30;\r\n        setIsRunning(false);\r\n        props.updateTime(secRef.current);\r\n        props.stopFunc();\r\n    }\r\n\r\n    const clearIncSec = () => {\r\n        window.clearInterval(secRef.current);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isRunning) {\r\n            // debugger\r\n\r\n            const intervalId = setInterval(() => {\r\n                if(secRef.current === 0) {\r\n                    reset();\r\n                } else if (props.isCombo) {\r\n                    clearIncSec();\r\n                    secRef.current = secRef.current + 10;    //add 10 sec\r\n                    props.setCombFalse();   //to trigger useEffect to start again\r\n                } else secRef.current = secRef.current - 1;\r\n\r\n                props.updateTime(secRef.current);\r\n            }, 1000);\r\n\r\n            return (() => clearInterval(intervalId));\r\n        }\r\n    }, [isRunning, props.isCombo]);\r\n\r\n    //works - but ++\r\n    // useEffect(() => {\r\n    //     // debugger;\r\n    //     secRef.current = window.setInterval(() => {\r\n    //         setSeconds((s) => s + 1);\r\n    //     }, 1000);\r\n\r\n    //     return clearIncSec;\r\n\r\n    // }, []);\r\n\r\n    return(\r\n        <div className=\"timer\">\r\n            {/* <p className=\"secs\">{seconds}s</p> */}\r\n\r\n            <div >\r\n                {/* {secRef.current > 0 ? */}\r\n                {!isRunning ?\r\n                    <button disabled={secRef.current===0} onClick={start} className=\"button\">Start</button>\r\n                    : \"\"}\r\n                {isRunning ? <button onClick={reset} className=\"button\">Reset</button>\r\n                    : \"\"}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Timer;","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\RandChar.js",[],"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\ResultTable.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":42,"column":9,"nodeType":"36","messageId":"37","endLine":42,"endColumn":15},{"ruleId":"38","severity":1,"message":"39","line":67,"column":6,"nodeType":"40","endLine":67,"endColumn":16,"suggestions":"41"},{"ruleId":"38","severity":1,"message":"42","line":48,"column":8,"nodeType":"40","endLine":48,"endColumn":34,"suggestions":"43"},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'getAll' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isStartChValid'. Either include it or remove the dependency array.","ArrayExpression",["46"],"React Hook useEffect has missing dependencies: 'props' and 'reset'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["47"],"no-global-assign","no-unsafe-negation",{"desc":"48","fix":"49"},{"desc":"50","fix":"51"},"Update the dependencies array to be: [isActive, isStartChValid]",{"range":"52","text":"53"},"Update the dependencies array to be: [isRunning, props, props.isCombo, reset]",{"range":"54","text":"55"},[2285,2295],"[isActive, isStartChValid]",[1329,1355],"[isRunning, props, props.isCombo, reset]"]