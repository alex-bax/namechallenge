[{"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\index.js":"1","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\App.js":"2","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\Timer.js":"3"},{"size":432,"mtime":1608890819850,"results":"4","hashOfConfig":"5"},{"size":5746,"mtime":1609335359728,"results":"6","hashOfConfig":"5"},{"size":1255,"mtime":1609329995810,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"142gdva",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"10"},"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\index.js",[],["16","17"],"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\App.js",["18","19"],"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\Timer.js",["20"],"import { useState, useEffect } from \"react\";\r\n\r\nvar Timer = (props) => {\r\n\r\n    const [seconds, setSeconds] = useState(props.secs);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n    const toggleIsRunning = () => { setIsRunning(!isRunning); }\r\n    const reset = () => {\r\n        setSeconds(props.secs);\r\n        setIsRunning(false);\r\n        props.stopFunc();   //reset game\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (isRunning && seconds > 0) {\r\n            interval = setInterval(() => {\r\n                // setSeconds(seconds => seconds - 1);\r\n                setSeconds(seconds-1);\r\n              }, 1000);\r\n        } else if (isRunning) {\r\n            // debugger;\r\n            setSeconds(0);\r\n            setIsRunning(false);\r\n            props.stopFunc();\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isRunning, seconds]);     //Only re-run effect if these state changes\r\n\r\n    return(\r\n        <div className=\"Timer\">\r\n            <p>{seconds}s</p>\r\n            <button onClick={toggleIsRunning}>{isRunning ? \"Pause\" : \"Start\"} </button>\r\n            <button onClick={reset}>Reset</button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Timer;",{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":2,"column":20,"nodeType":"27","messageId":"28","endLine":2,"endColumn":29},{"ruleId":"25","severity":1,"message":"29","line":35,"column":9,"nodeType":"27","messageId":"28","endLine":35,"endColumn":15},{"ruleId":"30","severity":1,"message":"31","line":30,"column":8,"nodeType":"32","endLine":30,"endColumn":28,"suggestions":"33"},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'getAll' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["36"],"no-global-assign","no-unsafe-negation",{"desc":"37","fix":"38"},"Update the dependencies array to be: [isRunning, props, seconds]",{"range":"39","text":"40"},[911,931],"[isRunning, props, seconds]"]