[{"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\index.js":"1","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\App.js":"2","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\Timer.js":"3"},{"size":432,"mtime":1608890819850,"results":"4","hashOfConfig":"5"},{"size":5673,"mtime":1609332305634,"results":"6","hashOfConfig":"5"},{"size":1255,"mtime":1609329995810,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"142gdva",{"filePath":"11","messages":"12","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"10"},"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\index.js",[],["17","18"],"C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\App.js",["19","20"],"import './App.css';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Timer from './Components/Timer';\n\nvar App = () => {\n  const [cityInp, setCityInp] = useState(\"\");\n  const [sendVal, setSendVal] = useState(\"\");   //final val being sent\n  const [score, setScore] = useState(0);\n  const [acc, setAcc] = useState(false);    //if sent city was accepted\n\n  // const [isLoading, setLoading] = useState(true);\n  const [isDone, setIsDone] = useState(false);   //is game-timer done, ie. is can user send cities\n  const [startCh, setStartCh] = useState('Æ') //useState(String.fromCharCode(Math.floor(Math.random() * (\"Z\".charCodeAt(0) - \"A\".charCodeAt(0) + 1)) + \"A\".charCodeAt(0)));\n  const [usedCities, setUsedCities] = useState([\"Præstø\",\"Pedersker\",\"Padborg\",\"Pjedsted\",\"Pindstrup\",\"Pårup\",\"Præstbro\",\"Pandrup\",\"Poulstrup\"]); //useState([]);\n  const [infoMess, setInfoMess] = useState(\"\");\n  // const [citiesByStartCh, setCitiesByStartCh] = useState([]);\n\n  const handleChange = (event) => {\n    setCityInp(event.target.value)\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();   //prev sit from reloading..\n    setSendVal(cityInp);\n    const cityInpLow = cityInp.toLowerCase();\n    isStartChValid('W');  //test\n    if ((startCh.toLowerCase() === cityInpLow.charAt(0) && !usedCities.includes(cityInpLow))) {\n      checkCity(cityInp);\n    } else {\n      setAcc(false);\n    }\n  }\n\n  const getAll = () => {\n    axios.get('https://localhost:44334/city')\n      .then(res => {\n        console.log(res.data);\n        setScore(res.data);\n        // debugger;\n      }).catch((error) => {\n        console.log(error);\n        if (error.response) {\n          console.log(error.response.data);\n          console.log(error.response.status);\n          console.log(error.response.headers);\n        }\n      })\n    }\n\n  //passed down to Timer - reset all state\n  function stopGame () {\n    setIsDone(!isDone);\n    if(isDone) {\n      setScore(0);\n      setUsedCities([]);\n    }\n  }\n\n  const checkCity = (cityName) => {\n    axios.get('https://localhost:5001/city/' + cityName)\n      .then(res => {\n        console.log(\"checkCity:\", res.data);\n        // setLoading(false);\n        setAcc(res.data);\n        if(res.data) {\n          setCityInp(\"\");\n          setScore(score + 1);\n          setUsedCities(oldLst => [...oldLst, cityName.toLowerCase()]);\n          // setStartCh(cityName.charAt(cityName.length - 1));\n          isStartChValid(cityName.charAt(cityName.length - 1));   //recurse until accep. new rand startCh\n\n          // console.log(cityName.charAt(cityName.length - 1));\n        }\n    });\n  }\n\n  //recurses until new usable startCh is generated - then changes state\n  const isStartChValid = (stCh) => {\n    axios.get('https://localhost:5001/cat/' + stCh.toUpperCase())\n    .then(resp =>  {\n        const citiesByCh = resp.data.citiesStartCh;\n        console.log(stCh+\" startCh: \", citiesByCh);\n        debugger;\n        if (citiesByCh.length > 0) {\n          const fil = usedCities.filter(name => citiesByCh.includes(name));   //keep items that are in both lsts\n          if (fil.length === citiesByCh.length) {   //lsts identical - thus all cities w. that startCh are used\n            setInfoMess(\"Random letter generated \\n No cities left starting with: \\n\" + stCh);\n            setTimeout(() => {\n              setInfoMess(\"\")\n            }, 500000)\n            isStartChValid(randStartCh());\n\n          } else {\n            setStartCh(stCh);\n          }\n        } else {  //no cities w. startCh in API e.g 'Z' - find new rand. startCh\n          debugger;\n          // isStartChValid(randStartCh());\n          isStartChValid('P');\n\n        }\n    })\n  }\n\n\n  const randStartCh = () => {\n    const randAZLst = [...Array('Z'.charCodeAt(0) - 'A'.charCodeAt(0) + 1).keys()].map(i => i + 'A'.charCodeAt(0));   //[65 .. 90]\n    // console.log(\"randAZ:\", randAZLst);\n    const randLst = randAZLst.concat(['Æ'.charCodeAt(0), 'Ø'.charCodeAt(0), 'Å'.charCodeAt(0)]);\n    // console.log(\"ÆØÅ\", randLst);\n    const res = randLst[Math.floor(Math.random() * randLst.length)];\n\n    return String.fromCharCode(res);\n  }\n\n  return (\n    <div className=\"container\">\n\n      <header>\n        Header\n      </header>\n      <main className=\"main\">\n        <img className=\"bg\" alt=\"nyhavn\" src=\"https://images.unsplash.com/photo-1513622470522-26c3c8a854bc?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80\"/>\n\n        <aside className=\"left\">\n          Left\n        </aside>\n        <article className=\"mainContent\">\n\n          <h2 className=\"wow\">City Name Challenge - Denmark</h2>\n          <p>Enter a danish City that starts with the letter: </p>\n          <h2>{startCh.toUpperCase()}</h2>\n          {sendVal ? <p> Entered: <span className={acc ? \"correctTxt\" : \"wrongTxt\" }>{sendVal}</span></p> : <p></p> }\n          {infoMess.length === 0 ? <p>Score: {score}</p> : <p className={[\"display-linebreak\", \"blue-border\"].join(\" \")}>{infoMess}</p>}\n          <Timer secs={60} stopFunc={stopGame}/>\n\n          {!isDone ?\n            <div className=\"form\">\n                <form onSubmit={handleSubmit}>\n                    <div className=\"inpDiv\">\n                      <input type=\"text\" onChange={handleChange} value={cityInp} />\n                    </div>\n                    <button type=\"submit\">Submit city</button>\n                </form>\n            </div>\n              : <p>Game done</p>\n          }\n        </article>\n\n        <nav className=\"right\">\n          RIGHT\n        </nav>\n\n      </main>\n\n\n\n     <footer className=\"footer\">Footer</footer>\n    </div>\n\n  );\n}\n\nexport default App;\n","C:\\Users\\alext\\Documents\\CityNameChallenge\\ui\\src\\Components\\Timer.js",["21"],"import { useState, useEffect } from \"react\";\r\n\r\nvar Timer = (props) => {\r\n\r\n    const [seconds, setSeconds] = useState(props.secs);\r\n    const [isRunning, setIsRunning] = useState(false);\r\n\r\n    const toggleIsRunning = () => { setIsRunning(!isRunning); }\r\n    const reset = () => {\r\n        setSeconds(props.secs);\r\n        setIsRunning(false);\r\n        props.stopFunc();   //reset game\r\n    }\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (isRunning && seconds > 0) {\r\n            interval = setInterval(() => {\r\n                // setSeconds(seconds => seconds - 1);\r\n                setSeconds(seconds-1);\r\n              }, 1000);\r\n        } else if (isRunning) {\r\n            // debugger;\r\n            setSeconds(0);\r\n            setIsRunning(false);\r\n            props.stopFunc();\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [isRunning, seconds]);     //Only re-run effect if these state changes\r\n\r\n    return(\r\n        <div className=\"Timer\">\r\n            <p>{seconds}s</p>\r\n            <button onClick={toggleIsRunning}>{isRunning ? \"Pause\" : \"Start\"} </button>\r\n            <button onClick={reset}>Reset</button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Timer;",{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":2,"column":20,"nodeType":"28","messageId":"29","endLine":2,"endColumn":29},{"ruleId":"26","severity":1,"message":"30","line":35,"column":9,"nodeType":"28","messageId":"29","endLine":35,"endColumn":15},{"ruleId":"31","severity":1,"message":"32","line":30,"column":8,"nodeType":"33","endLine":30,"endColumn":28,"suggestions":"34"},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'getAll' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["37"],"no-global-assign","no-unsafe-negation",{"desc":"38","fix":"39"},"Update the dependencies array to be: [isRunning, props, seconds]",{"range":"40","text":"41"},[911,931],"[isRunning, props, seconds]"]